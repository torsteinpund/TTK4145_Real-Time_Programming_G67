/*package main

import (
	"Driver-go/elevio"
	"fmt"
	"time"
)

func main() {
	fmt.Println("Started!")

	// Initialize elevator with hardware connection
	numFloors := 4
	elevio.Init("localhost:15657", numFloors) // Connect to hardware server

	initElevator(numFloors, elevio.NumButtonTypes)

	// Check if elevator starts between floors
	if initialFloor := elevio.GetFloor(); initialFloor == -1 {
		fmt.Println("Elevator is between floors on startup. Running initialization...")
		fsmOnInitBetweenFloors()
	} else {
		// If the elevator starts at a valid floor, initialize its state
		fsmOnFloorArrival(initialFloor)
	}

	// Polling rate configuration
	inputPollRate := 25 * time.Millisecond // Adjust as needed

	// Event channels for hardware events
	buttonPressCh := make(chan elevio.ButtonEvent)
	floorSensorCh := make(chan int)
	stopButtonCh := make(chan bool)

	// Start polling goroutines
	go elevio.PollButtons(buttonPressCh)
	go elevio.PollFloorSensor(floorSensorCh)
	go elevio.PollStopButton(stopButtonCh)

	// Initialize system state
	prevFloor := -1
	//timerActive := false
	//var timerEndTime float64

	// Main event loop
	for {
		select {
		case buttonEvent := <-buttonPressCh:
			// Handle button press event
			fmt.Printf("Button pressed at floor %d, button type %d\n", buttonEvent.Floor, buttonEvent.Button)
			fsmOnRequestButtonPress(buttonEvent.Floor, buttonEvent.Button)

		case currentFloor := <-floorSensorCh:
			// Handle floor sensor event
			if currentFloor != prevFloor {
				fmt.Printf("Arrived at floor %d\n", currentFloor)
				fsmOnFloorArrival(currentFloor)
				elevio.SetFloorIndicator(currentFloor) // Update floor indicator lamp

				// Stop and restart the timer when arriving at a floor
				timerStop()
				timerStart(3.0) // Set door timeout to 3 seconds
			}
			prevFloor = currentFloor

		case stopPressed := <-stopButtonCh:
			// Handle stop button event
			if stopPressed {
				fmt.Println("Stop button pressed!")
				elevio.SetStopLamp(true)
				// Add logic to stop the elevator safely
			} else {
				fmt.Println("Stop button released!")
				elevio.SetStopLamp(false)
			}

		case <-time.After(inputPollRate):
			// Periodic tasks (check timer)
			if timerTimedOut() {
				fmt.Println("Door timeout occurred.")
				fsmOnDoorTimeout()
				timerStop() // Reset the timer after timeout handling
			}
		}
	}
}
*/